{"version":3,"file":"static/js/34.0d37d492.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React from 'react';\nimport s from './ProfileInfo.module.css';\n\nclass ProfileStatus extends React.Component {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        });\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                    <div>\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"Fuck, no status((\"}</span>\n                    </div>\n                }\n                {this.state.editMode &&\n                    <div>\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\n                               value={this.state.status}></input>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProfileStatus;\n\n","import React, {useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode]  = useState(false);\n    let [status, setStatus]  = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status)\n    }, [props.status] );\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"Fuck, no status((\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                           value={status}></input>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;\n\n","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader\";\n// import ProfileStatus from './ProfileStatus';\nimport ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n    if (!profile) {\n        return <Preloader />\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large} />\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n        <div className={s.item}>\n            <img src='https://i.yapx.cc/QUYDv.jpg'/>\n            {props.message};\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormControl/FormControl\";\n\nconst MyPosts = React.memo(props => {\n    // console.log(\"Хуй пизда Джигурда))\") // Это для примера!!!\n    let postsElements = props.posts.map(post => <Post message={post.message} likesCount={post.likesCount}/>)\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst addNewPostForm= (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name='newPostText' component={Textarea} placeholder={\"Post message\"}\n                validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(addNewPostForm);\n\nexport default MyPosts;","import React, {createRef, useContext} from 'react';\nimport {addPostActionCreator} from \"../../Redux/Profile-Reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../Redux/Profile-Reducer\";\nimport {useEffect} from \"react\";\nimport {Navigate, useNavigate, useParams} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\nfunction ProfileContainer(props) {\n    let {userId} = useParams();\n    if (!userId) {\n        userId = props.authorizedUserId;\n        /*if (!userId) {\n            props.history.replace('/login');\n        }*/\n    };\n\n    useEffect(() => {\n\n        props.getUserProfile(userId);\n        props.getStatus(userId)\n    }, [userId]);\n\n    return (\n        <div>\n            <Profile {...props}\n                     profile={props.profile}\n                     status={props.status}\n                     updateStatus={props.updateStatus}/>\n        </div>\n    );\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withAuthRedirect\n)(ProfileContainer);\n\n"],"names":["React","props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","_ref","profile","className","s","src","photos","large","ProfileStatusWithHooks","Preloader","message","likesCount","MyPosts","postsElements","posts","map","post","Post","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","connect","state","profilePage","dispatch","addPostActionCreator","ProfileInfo","MyPostsContainer","compose","authorizedUserId","auth","userId","isAuth","getUserProfile","getStatus","withAuthRedirect","useParams","Profile","_objectSpread"],"sourceRoot":""}